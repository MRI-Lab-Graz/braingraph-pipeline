# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

/logs
/studies

pipeline_run20*.log
*results*/
/braingraph_pipeline/

# ===========================================
# BRAINGRAPH PIPELINE SPECIFIC IGNORES
# ===========================================

# Empty files that VS Code auto-creates (main issue!)
**/*_empty.py
**/*_placeholder.*
**/empty_*.py
**/placeholder_*.*

# Auto-generated test files  
test_*.json
*_test.json
temp_*.py
*_temp.*
scratch_*.*

# Bootstrap and cross-validation configs (study-specific)
cross_validation_configs/
bootstrap_configs/
*bootstrap_optimization_config*.json

# Auto-generated aggregation files
aggregate_network_measures.py
aggregated_network_measures.csv

# Pipeline logs and outputs
pipeline_run_*.log
soccer_pipeline.log
*.log

# Study-specific directories (these should be managed separately)  
studies/*/results/
studies/*/logs/

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Braingraph Pipeline Data Directories
# These directories contain large neuroimaging data files and should not be versioned
data/
fz/

# Virtual environment for braingraph pipeline
braingraph_pipeline/

# Braingraph Pipeline Generated Files
# ===================================

# Results and Output Directories
analysis_results/
results/
*_results/
*_output/
real_cv_test/
cv_demo_results/
final_demo_results/

# Test Data Directories
test_data_*/
temp_*/

# Generated Configuration Files
cross_validated_*.json
cv_wave_*.json
extraction_config_*.json
bootstrap_wave_*.json
conservative_config.json
liberal_config.json
optimal_config.json
optimized_full_analysis_config.json

# Log Files
*.log
pipeline_run_*.log

# Temporary Files
temp_*.json
temp_sweep_*/

# Generated Reports
bootstrap_validation_report/
validation_reports/

# Backup Files
*.backup
*.bak

# ===========================================
# VS CODE AUTO-CREATION PREVENTION
# ===========================================

# Files that VS Code extensions might auto-create
**/__init__.py
**/main.py
**/setup.py
**/requirements.txt

# VS Code workspace cache
.vscode/settings.json.bak
.vscode/*.code-workspace

# Python extension auto-generated files
.python-version
pyrightconfig.json

# Jupyter extension files
.jupyter/
*.ipynb_checkpoints/

# Auto-imported empty modules (common cause of U status files)
imported_*.py
auto_*.py
generated_*.py

# Sweep Results
sweep_results.csv
*_sweep_*.csv

# Large Data Files
*.fz
*.fib.gz
*.nii.gz
*.mat
