╔════════════════════════════════════════════════════════════════════════════════════╗
║                     OptiConn Pipeline Architecture                                 ║
║                                                                                    ║
║  A Visual Map of Which Scripts Do What and When                                   ║
╚════════════════════════════════════════════════════════════════════════════════════╝


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 SCENARIO 1: Parameter Sweep (Find Optimal Settings)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────┐
│ USER: opticonn sweep -i /data -o output --quick                │
└────────────────┬────────────────────────────────────────────────┘
                 │
                 ▼
        ┌─────────────────────┐
        │ opticonn_hub.py     │  [ENTRY POINT]
        │ ═════════════════   │  Parse CLI, route to sweep
        └────────────┬────────┘
                     │
                     ▼
        ┌─────────────────────────────┐
        │ validate_setup.py           │  [VALIDATION]
        │ ═════════════════════════   │  Check Python deps, DSI Studio, configs
        └────────────┬────────────────┘
                     │
                     ▼
    ┌───────────────────────────────────────────────┐
    │ cross_validation_bootstrap_optimizer.py      │  [SWEEP ENGINE]
    │ ════════════════════════════════════════════ │  Main orchestrator
    │                                             │
    │ 1. Load config (sweep_micro.json)          │
    │ 2. Build parameter grid:                   │
    │    └─ sweep_utils.py                      │  [GRID GENERATION]
    │       - Parse ranges (0.05:0.05:0.2)     │
    │       - Cartesian product                │
    │       - Returns: [combo1, combo2, ...]   │
    │                                           │
    │ 3. Create bootstrap waves                 │
    │                                           │
    │ 4. For each (wave, combo) pair:          │
    └───────────────────┬───────────────────────┘
                        │
        ┌───────────────┼───────────────┐
        │               │               │
        ▼               ▼               ▼
    Combo 1         Combo 2         Combo N
        │               │               │
        └───────────────┼───────────────┘
                        │
                        ▼
        ┌─────────────────────────────┐
        │ run_pipeline.py             │  [SINGLE COMBO EXECUTOR]
        │ ═════════════════════════   │
        │ Orchestrates single param   │
        │ combo through extraction &  │
        │ scoring pipeline            │
        └────────────┬────────────────┘
                     │
         ┌───────────┼───────────┐
         │           │           │
         ▼           ▼           ▼
    ┌──────────┐ ┌──────────┐ ┌──────────┐
    │extract_  │ │aggregate │ │qa_cross_ │
    │connect.  │ │network_  │ │validator │
    │matrices  │ │measures  │ │py        │
    │.py       │ │.py       │ │          │
    ├──────────┤ ├──────────┤ ├──────────┤
    │DSI       │ │Graph     │ │PREVENT.  │
    │Studio   │ │metrics:  │ │Layer 1&2:│
    │↓        │ │- density │ │- Norm.   │
    │Connect. │ │- effic.  │ │  bounds  │
    │matrix   │ │- small-w │ │- Success │
    │created  │ │  ...     │ │  flags   │
    └──────────┘ └──────────┘ └────┬─────┘
                                    │
                                    ▼
                        ┌───────────────────────┐
                        │bootstrap_qa_          │
                        │validator.py           │
                        ├───────────────────────┤
                        │PREVENT. Layer 3:      │
                        │- Anomaly detection    │
                        │- Suspicious patterns  │
                        │- Flags in CSV         │
                        └───────────────────────┘

    After all combos complete:
    
    ┌─────────────────────────────────────────────────────┐
    │ Results Directory: sweep-UUID/optimize/             │
    │ ═════════════════════════════════════════════════   │
    │ bootstrap_qa_wave_1/                                │
    │ ├── combo_diagnostics.csv (all results + flags)    │
    │ └── combos/sweep_0001/, sweep_0002/, ...           │
    │                                                     │
    │ Next: opticonn review -i . --interactive            │
    └─────────────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 SCENARIO 2: Apply to Full Dataset (Use Known Best Parameters)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌──────────────────────────────────────────────────────┐
│ USER: opticonn apply -i /data --optimal-config best.│
│       json -o output                                 │
└────────────┬─────────────────────────────────────────┘
             │
             ▼
      ┌──────────────────┐
      │ opticonn_hub.py  │  [ENTRY POINT]
      └────────────┬─────┘
                   │
                   ▼
      ┌─────────────────────────────────────┐
      │ run_pipeline.py                     │  [FULL DATASET EXECUTOR]
      │ ═════════════════════════════════   │  Applies best params to all subjects
      │ (calls same pipeline as sweep:)    │
      │                                    │
      │ For each subject in dataset:       │
      │ 1. extract_connectivity_matrices   │
      │ 2. aggregate_network_measures      │
      │ 3. qa_cross_validator              │ (PREVENT L1&L2)
      │ 4. bootstrap_qa_validator          │ (PREVENT L3)
      └─────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 SCENARIO 3: Single Combo Test (Manual Parameter Testing)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌──────────────────────────────────────────────────────┐
│ USER: opticonn pipeline --step all -i /data          │
└────────────┬─────────────────────────────────────────┘
             │
             ▼
      ┌──────────────────┐
      │ opticonn_hub.py  │  [ENTRY POINT]
      └────────────┬─────┘
                   │
                   ▼
      ┌─────────────────────────┐
      │ run_pipeline.py         │  [SINGLE COMBO]
      │ (same as apply/sweep)   │
      └─────────────────────────┘


═════════════════════════════════════════════════════════════════════════════════════════
 SCRIPT CATEGORIES SUMMARY
═════════════════════════════════════════════════════════════════════════════════════════

🔴 CORE PIPELINE (Always Used - 6 Scripts)
    ├─ opticonn_hub.py .......................... Entry point (CLI dispatcher)
    ├─ run_pipeline.py ......................... Single combo executor
    ├─ extract_connectivity_matrices.py ........ DSI Studio wrapper
    ├─ aggregate_network_measures.py .......... Network metrics
    ├─ qa_cross_validator.py .................. QA validation + LAYER 1&2 PREVENTION
    └─ bootstrap_qa_validator.py .............. Anomaly detection + LAYER 3 PREVENTION

🟡 SWEEP-SPECIFIC (Only if doing parameter sweeps - 2 Scripts)
    ├─ cross_validation_bootstrap_optimizer.py  Sweep orchestrator
    └─ sweep_utils.py ......................... Grid/sampling utilities

🔵 VALIDATION & DEBUG (Optional - 4+ Scripts)
    ├─ validate_setup.py ...................... Pre-flight checks
    ├─ pre_test_validation.py ................. Quick validation
    ├─ verify_parameter_uniqueness.py ......... Debug combinations
    └─ json_validator.py ...................... Config validation

🟢 RESEARCH/ANALYSIS (Safe to Remove - 7+ Scripts)
    ├─ pareto_view.py ......................... Multi-objective analysis
    ├─ run_parameter_sweep.py ................. Legacy grid generator
    ├─ sensitivity_analyzer.py ............... Parameter sensitivity
    ├─ statistical_analysis.py ............... Statistical tests
    ├─ statistical_metric_comparator.py ....... Metric comparison
    ├─ aggregate_wave_candidates.py .......... Wave analysis
    └─ metric_optimizer.py ................... Optimization research


═════════════════════════════════════════════════════════════════════════════════════════
 PREVENTION SYSTEM (Automatically Active)
═════════════════════════════════════════════════════════════════════════════════════════

⭐ LAYER 1: Normalization Bounds Check
   Location: qa_cross_validator.py (during extraction)
   Prevents: QA scores outside valid range, normalization bugs
   Flag: "normalization_check_pass" in diagnostics

⭐ LAYER 2: Success Detection Validation
   Location: qa_cross_validator.py (after metrics)
   Prevents: Failed runs treated as successful
   Flag: "success_validation_pass" in diagnostics

⭐ LAYER 3: Anomaly Detection  
   Location: bootstrap_qa_validator.py (post-sweep)
   Prevents: Suspicious patterns (like iteration 15's QA=1.0000)
   Flag: "anomaly_flags" in CSV


═════════════════════════════════════════════════════════════════════════════════════════
 CONFIGURATION FILES
═════════════════════════════════════════════════════════════════════════════════════════

configs/
├─ braingraph_default_config.json ........... Full production config
├─ sweep_micro.json ........................ Ultra-minimal sweep (2 combos) ← --quick
├─ sweep_nano.json ........................ Tiny sweep (4-6 combos)
├─ sweep_probe.json ....................... Small sweep (10-20 combos)
├─ sweep_production_full.json ............. Full sweep (100+ combos)
└─ bootstrap_optimization_config.json ..... Master optimizer settings


═════════════════════════════════════════════════════════════════════════════════════════
 WHAT GETS REMOVED (Already Completed ✅)
═════════════════════════════════════════════════════════════════════════════════════════

❌ Removed:
   - scripts/dash_app/ directory
   - dash>=2.0.0 from pyproject.toml
   - plotly>=5.0.0 from pyproject.toml
   - Dash installation from install.sh

✅ Result:
   - Simplified web dependencies
   - Core pipeline unaffected
   - Prevention system still active


═════════════════════════════════════════════════════════════════════════════════════════
 DECISION TREE: Which Scripts Matter For Your Use Case?
═════════════════════════════════════════════════════════════════════════════════════════

Do you run parameter sweeps?
│
├─ YES → Keep: cross_validation_bootstrap_optimizer.py + sweep_utils.py
│        Can remove: pareto_view.py (optional, post-analysis only)
│
└─ NO  → Can remove: cross_validation_bootstrap_optimizer.py, sweep_utils.py
         Can remove: pareto_view.py (optimization analysis only)

Do you need research/sensitivity analysis?
│
├─ YES → Keep: sensitivity_analyzer.py, statistical_analysis.py, etc.
│
└─ NO  → Can remove: All research scripts (7+ files)

Do you value keeping validation/debug tools?
│
├─ YES → Keep: validate_setup.py, pre_test_validation.py, etc.
│
└─ NO  → Can remove: Optional validation scripts

Always keep:
│
└─ Core pipeline (6 scripts):
   opticonn_hub.py, run_pipeline.py, extract_connectivity_matrices.py,
   aggregate_network_measures.py, qa_cross_validator.py,
   bootstrap_qa_validator.py


═════════════════════════════════════════════════════════════════════════════════════════
 DOCUMENTATION FILES CREATED
═════════════════════════════════════════════════════════════════════════════════════════

Quick Reference (5-10 minutes):
  → SCRIPTS_SUMMARY.md ................ One-page quick reference
  → PROJECT_CLARITY.md ............... Big picture overview
  → DOCUMENTATION_INDEX.md ........... Map to all documentation

Deep Dives (10-15 minutes each):
  → SWEEP_WORKFLOW.md ................ Complete flow diagram
  → SCRIPT_REFERENCE.md .............. Decision tree + dependency tree
  → MINIMAL_DEMO.md .................. Runnable demos (3 options)
  → CLEANUP_GUIDE.md ................. Removal decision framework

Support Documentation:
  → SUMMARY.md ....................... This executive summary
  → VISUAL_ARCHITECTURE.txt .......... This file
  → README.md ........................ Project overview
  → PREVENTION_SYSTEM.md ............. 3-layer validation details


═════════════════════════════════════════════════════════════════════════════════════════
 GETTING STARTED
═════════════════════════════════════════════════════════════════════════════════════════

New to the codebase?
  1. Read: SCRIPTS_SUMMARY.md (5 min)
  2. Run: MINIMAL_DEMO.md option 1 (1 min)
  3. Study: SWEEP_WORKFLOW.md (10 min)
  
Modifying a script?
  1. Open: SCRIPT_REFERENCE.md
  2. Find: Your script + what calls it
  3. Check: Dependencies before modifying

Cleaning up?
  1. Read: CLEANUP_GUIDE.md
  2. Decide: What to remove
  3. Execute: With backup!

Everything working?
  1. Docs are ready for future reference
  2. Prevention system active
  3. Core pipeline clean and simple
  4. Check docs when curious!

═════════════════════════════════════════════════════════════════════════════════════════
